package flow;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2017年8月9日 下午01時50分31秒
 */
public class CheckAni extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2017年8月9日 下午01時50分31秒
	 */
	public CheckAni() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024年11月6日 下午04時05分46秒
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024年11月6日 下午04時05分46秒
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024年11月6日 下午04時05分46秒
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(10);
		com.avaya.sce.runtime.BooleanOperation bo1 = new com.avaya.sce.runtime.BooleanOperation(com.avaya.sce.runtime.BooleanOperation.AND);
		com.avaya.sce.runtime.Expression be1 = new com.avaya.sce.runtime.Expression("expression1", "S_OD:AniFirstNumber", com.avaya.sce.runtime.Expression.INT_EQUAL, "9", false);
		bo1.addExpression(be1);
		com.avaya.sce.runtime.Expression be2 = new com.avaya.sce.runtime.Expression("expression2", "S_OD:ANI_length", com.avaya.sce.runtime.Expression.INT_EQUAL, "9", false);
		bo1.addExpression(be2);
		com.avaya.sce.runtime.BooleanOperation bo2 = new com.avaya.sce.runtime.BooleanOperation(com.avaya.sce.runtime.BooleanOperation.AND);
		com.avaya.sce.runtime.Expression be3 = new com.avaya.sce.runtime.Expression("expression3", "S_OD:ANI_length", com.avaya.sce.runtime.Expression.INT_GREATER_THEN_EQUAL, "12", false);
		bo2.addExpression(be3);
		com.avaya.sce.runtime.Expression be4 = new com.avaya.sce.runtime.Expression("expression4", "S_OD:AniFourNumber", com.avaya.sce.runtime.Expression.INT_EQUAL, "8869", false);
		bo2.addExpression(be4);
		com.avaya.sce.runtime.BooleanOperation bo3 = new com.avaya.sce.runtime.BooleanOperation(com.avaya.sce.runtime.BooleanOperation.AND);
		com.avaya.sce.runtime.Expression be5 = new com.avaya.sce.runtime.Expression("expression5", "S_OD:AniTwoNumber", com.avaya.sce.runtime.Expression.INT_EQUAL, "9", false);
		bo3.addExpression(be5);
		com.avaya.sce.runtime.Expression be6 = new com.avaya.sce.runtime.Expression("expression6", "S_OD:ANI_length", com.avaya.sce.runtime.Expression.INT_EQUAL, "10", false);
		bo3.addExpression(be6);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "###S_USERDATA_ANI", "S_USERDATA:ANI").setDebugId(1219));
		actions.add(new com.avaya.sce.runtime.varoperations.Length("S_OD:ANI_length", "S_USERDATA:ANI").setDebugId(352));
		actions.add(new com.avaya.sce.runtime.varoperations.SubString("S_OD:AniFirstNumber", "S_USERDATA:ANI", 0, 1).setDebugId(353));
		actions.add(new com.avaya.sce.runtime.varoperations.SubString("S_OD:AniFourNumber", "S_USERDATA:ANI", 0, 4).setDebugId(354));
		actions.add(new com.avaya.sce.runtime.varoperations.SubString("S_OD:AniTwoNumber", "S_USERDATA:ANI", 1, 1).setDebugId(355));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "###S_OD_ANI_Length", "S_OD:ANI_length").setDebugId(1206));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "###S_OD_AniFirstNumber", "S_OD:AniFirstNumber").setDebugId(1207));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "###S_OD_AniFourNumber", "S_OD:AniFourNumber").setDebugId(1208));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "###S_OD_AniTwoNumber", "S_OD:AniTwoNumber").setDebugId(1209));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition").setDebugId(356)).evaluate(mySession, bo1)) {
			actions = new java.util.ArrayList(5);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AddZero", "0", true).setDebugId(360));
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("AddZero", "S_USERDATA:ANI", false).setDebugId(361));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("S_USERDATA:ANI", "AddZero", false).setDebugId(362));
			actions.add(new com.avaya.sce.runtime.Next("Generate_TID", " 0.concat[ANI]_pass").setDebugId(363));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition").setDebugId(364)).evaluate(mySession, bo2)) {
			actions = new java.util.ArrayList(6);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AddZero", "0", true).setDebugId(368));
			actions.add(new com.avaya.sce.runtime.varoperations.SubString("S_OD:NineDigitsPhoneNumber", "S_USERDATA:ANI", 3, 9).setDebugId(369));
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("AddZero", "S_OD:NineDigitsPhoneNumber", false).setDebugId(370));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("S_USERDATA:ANI", "AddZero", false).setDebugId(371));
			actions.add(new com.avaya.sce.runtime.Next("Generate_TID", " 0.concat[ANI]_pass").setDebugId(372));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition").setDebugId(373)).evaluate(mySession, bo3)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.Next("Generate_TID", "Normal").setDebugId(377));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("AN_881018", "Default").setDebugId(379));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
