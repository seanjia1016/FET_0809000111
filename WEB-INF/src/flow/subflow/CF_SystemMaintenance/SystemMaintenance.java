package flow.subflow.CF_SystemMaintenance;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2017年7月5日 下午03時40分29秒
 */
public class SystemMaintenance extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2017年7月5日 下午03時40分29秒
	 */
	public SystemMaintenance() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024年10月9日 下午05時54分47秒
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024年10月9日 下午05時54分47秒
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024年10月9日 下午05時54分47秒
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(7);
		com.avaya.sce.runtime.BooleanOperation bo1 = new com.avaya.sce.runtime.BooleanOperation(com.avaya.sce.runtime.BooleanOperation.AND);
		com.avaya.sce.runtime.Expression be1 = new com.avaya.sce.runtime.Expression("expression1", "IVR_OPERATION_CTRL:OPERATION_CTRL_FLAG", com.avaya.sce.runtime.Expression.STRING_EQUAL, "ON", false);
		bo1.addExpression(be1);
		com.avaya.sce.runtime.BooleanOperation bo2 = new com.avaya.sce.runtime.BooleanOperation(com.avaya.sce.runtime.BooleanOperation.OR);
		com.avaya.sce.runtime.Expression be2 = new com.avaya.sce.runtime.Expression("expression2", "S_OD:Operation_date_Start", com.avaya.sce.runtime.Expression.INT_GREATER_THAN, "IVR_OPERATION_CTRL:CTRL_START_DATE", true);
		bo2.addExpression(be2);
		com.avaya.sce.runtime.Expression be3 = new com.avaya.sce.runtime.Expression("expression3", "S_OD:Operation_date_Start", com.avaya.sce.runtime.Expression.INT_LESS_THAN, "IVR_OPERATION_CTRL:CTRL_FINISH_DATE", true);
		bo2.addExpression(be3);
		bo1.addExpression(bo2);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("S_OD:Operation_time_Now", "time:audio", false).setDebugId(48));
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("S_OD:Operation_date_Start", "date:audio", false).setDebugId(49));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "###operation_finishDate_systemMaintenance", "IVR_OPERATION_CTRL:CTRL_FINISH_DATE").setDebugId(106));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "###operation_finishTime_systemMaintenance", "IVR_OPERATION_CTRL:CTRL_FINISH_TIME").setDebugId(107));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "###operation_startDate_systemMaintenance", "IVR_OPERATION_CTRL:CTRL_START_DATE").setDebugId(108));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "###operation_startTime_systemMaintenance", "IVR_OPERATION_CTRL:CTRL_START_TIME").setDebugId(109));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "IVR_OPERATION_CTRL:CTRL_START_TIME", com.avaya.sce.runtime.Expression.IS_EMPTY).setDebugId(112)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("IVR_OPERATION_CTRL:CTRL_START_TIME", "235500", true).setDebugId(110));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "IVR_OPERATION_CTRL:CTRL_FINISH_TIME", com.avaya.sce.runtime.Expression.IS_EMPTY).setDebugId(113)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("IVR_OPERATION_CTRL:CTRL_FINISH_TIME", "003000", true).setDebugId(111));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		actions = new java.util.ArrayList(3);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "###SystemCheck_Operation_time_now", "S_OD:Operation_time_Now").setDebugId(114));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "###SystemCheck_Operation_date_Start", "S_OD:Operation_date_Start").setDebugId(115));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "###SystemCheck_Operation_count", "IVR_OPERATION_CTRL:count").setDebugId(129));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "IVR_OPERATION_CTRL:count", com.avaya.sce.runtime.Expression.INT_LESS_THAN, "1", false).setDebugId(50)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("CF_SystemMaintenance-AN_888120", "OFF").setDebugId(137));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		actions = new java.util.ArrayList(8);
		actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("S_OD:Operation_date_Start", "S_OD:Operation_time_Now", false).setDebugId(122));
		actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("IVR_OPERATION_CTRL:CTRL_START_DATE", "IVR_OPERATION_CTRL:CTRL_START_TIME", false).setDebugId(130));
		actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("IVR_OPERATION_CTRL:CTRL_FINISH_DATE", "IVR_OPERATION_CTRL:CTRL_FINISH_TIME", false).setDebugId(123));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "###S_OD Operation_date+Time_Start", "S_OD:Operation_date_Start").setDebugId(127));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "###System operation_fisish date+time", "IVR_OPERATION_CTRL:CTRL_FINISH_DATE").setDebugId(128));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "###System operation_start date+time", "IVR_OPERATION_CTRL:CTRL_START_DATE").setDebugId(131));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "###System Operation Flag", "IVR_OPERATION_CTRL:OPERATION_CTRL_FLAG").setDebugId(132));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "###pass1", "").setDebugId(125));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition").setDebugId(51)).evaluate(mySession, bo1)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.Next("CF_SystemMaintenance-Pass", "ON").setDebugId(135));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("CF_SystemMaintenance-AN_888120", "Operation_time=OFF").setDebugId(60));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
