package flow.subflow.API_addCIE;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Calendar;

import org.json.JSONObject;

import com.crm.utils.Utils;

import flow.IProjectVariables;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2024年6月5日 下午2:42:26 [GMT+08:00]
 */
public class execute extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2024年6月5日 下午2:42:26 [GMT+08:00]
	 */
	public execute() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2024年6月5日 下午2:42:26 [GMT+08:00]
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		final String TID = Utils.TID(mySession);
		
		String apiName = "addCIE";

		final String IP = Utils.IP(mySession);
		String url = "http://" + IP + "/FET_IVR_MiddleWare/" + apiName;
		final String flowname = Utils.getFieldString(mySession,
				IProjectVariables.PROPERTIES,
				IProjectVariables.PROPERTIES_FIELD_FLOW_NAME);

		// API開始時間
		long apiStartTimeInMillis = Calendar.getInstance().getTimeInMillis();
		try{
			URL obj = new URL(url);
			HttpURLConnection con = (HttpURLConnection) obj.openConnection();
			con.setRequestMethod("POST");
			con.setConnectTimeout(60000);
			con.setRequestProperty("Content-Type", "text/xml;charset=UTF-8");
			
			String urlParameters = this.buildParam(mySession);
			Utils.LogsINFO(mySession, "jsonObject Request(TID:["+TID+"]"+apiName+"):" +urlParameters);

			// Send post request
			con.setDoOutput(true);
			DataOutputStream wr = null;
			int responseCode = 0;
			wr = new DataOutputStream(con.getOutputStream());
			wr.write(urlParameters.getBytes("UTF-8"));
			wr.flush();
			wr.close();
			responseCode = con.getResponseCode();

			Utils.LogsINFO(mySession, "con Response(TID:["+TID+"]"+apiName+"):" +con);
			Utils.LogsINFO(mySession, "wr Response(TID:["+TID+"]"+apiName+"):" +wr);
			Utils.LogsINFO(mySession, "url Response(TID:["+TID+"]"+apiName+"):" +url);
			Utils.LogsINFO(mySession, "urlParameters Response(TID:["+TID+"]"+apiName+"):" +urlParameters);
			Utils.LogsINFO(mySession, "responseCode Response(TID:["+TID+"]"+apiName+"):" +responseCode);
			
			
			BufferedReader in = null;
			in = new BufferedReader(new InputStreamReader(con.getInputStream()));
			String inputLine;
			StringBuffer response = new StringBuffer();
			while ((inputLine = in.readLine()) != null) {
				response.append(inputLine);
			}
			in.close();

			JSONObject responseJsonObject = new JSONObject(response.toString());
			Utils.LogsINFO(mySession, "ResponseJsonObject Response(TID:["+TID+"]"+apiName+"):" +responseJsonObject);
			// API結束時間
			long apiEndTimeInMillis = Calendar.getInstance().getTimeInMillis();
			long timeLong = apiEndTimeInMillis - apiStartTimeInMillis;
			String timeLongSecStr = String.valueOf(timeLong / 1000);
			// API經過時間
			Utils.setFieldString(mySession,
					IProjectVariables.CIE__CREATE_SERVICE__OUTPUT,
					IProjectVariables.CIE__CREATE_SERVICE__OUTPUT_FIELD_APICONNECTTIMELONG,
					timeLongSecStr);
			
			// 讀取回傳值
			// 這個用法僅限於回傳欄位與OD變數名完全一致的情況才可以使用
			String[] responseAttrArray = new String[] {"accountContactId", "accountContractCompId",
					"billingAccountId", "billingSubscriberId",
					"cacheSubscriberInfoException", "cacheSubscriberInfoResultCode",
					"CONTRACT_ID", "IVR_LANG", "mobileGenerationCode", "MSISDN", "paymentCategory",
					"serviceProvider", "SUBSCRIBER_STATUS", "SUBSCRIBER_TYPE", "subscriberContactId",
					"subscriberContractCompId", "cieaddReturncode", "cieId", "cieDetailId"};
			
			String value = "";
			for (String attribute : responseAttrArray) {
				if (responseJsonObject.has(attribute)) {
					value = responseJsonObject.getString(attribute);
					Utils.setFieldString(mySession,
							IProjectVariables.CIE__CREATE_SERVICE__OUTPUT,
							attribute,
							value);
				}
			}

		} catch (ArithmeticException e) {
			Utils.LogsERROR(mySession, Utils.getStackTrace(e));
			Utils.LogsERROR(mySession, "ArithmeticException Response(TID:["+TID+"]"+apiName+"):" +e.getMessage());
		} catch (MalformedURLException e) {
			Utils.LogsERROR(mySession, Utils.getStackTrace(e));
			Utils.LogsERROR(mySession, "MalformedURLException Response(TID:["+TID+"]"+apiName+"):" +e.getMessage());
		} catch (IOException e) {
			Utils.LogsERROR(mySession, Utils.getStackTrace(e));
			Utils.LogsERROR(mySession, "IOException Response(TID:["+TID+"]"+apiName+"):" +e.getMessage());
		} catch (Exception e) {
			Utils.LogsERROR(mySession, Utils.getStackTrace(e));
			Utils.LogsERROR(mySession, "Exception Response(TID:["+TID+"]"+apiName+"):" +e.getMessage());
		} finally {
			Utils.LogsINFO(mySession, apiName + " END" );
		}
	}
	
	private String buildParam(com.avaya.sce.runtimecommon.SCESession mySession) {
		
		String bpId = Utils.getFieldString(mySession,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT_FIELD_BP_ID);
		String cie_createDate = Utils.getFieldString(mySession,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT_FIELD_CIE__CREATE_DATE);
		String cie_endDate = Utils.getFieldString(mySession,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT_FIELD_CIE__END_DATE);
		String cie_InOutbound = Utils.getFieldString(mySession,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT_FIELD_CIE__IN_OUTBOUND);
		String cie_isNonFET = Utils.getFieldString(mySession,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT_FIELD_CIE__IS_NON_FET);
		String cie_startDate = Utils.getFieldString(mySession,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT_FIELD_CIE__START_DATE);
		String FlowName = Utils.getFieldString(mySession,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT_FIELD_FLOW_NAME);
		String msisdnNumber = Utils.getFieldString(mySession,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT_FIELD_MSISDN_NUMBER);
		String sessionId = Utils.getFieldString(mySession,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT_FIELD_SESSION_ID);
		String subscriber = Utils.getFieldString(mySession,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT_FIELD_SUBSCRIBER);
		String transPath = Utils.getFieldString(mySession,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT,
				IProjectVariables.CIE__CREATE_SERVICE__INPUT_FIELD_TRANS_PATH);
		
		JSONObject jsonObject = new JSONObject();

		jsonObject.put("bpId", bpId);
		jsonObject.put("cie_createDate", cie_createDate);
		jsonObject.put("cie_startDate", cie_startDate);
		jsonObject.put("cie_endDate", cie_endDate);
		jsonObject.put("cie_InOutbound", cie_InOutbound);
		jsonObject.put("cie_isNonFET", cie_isNonFET);
		jsonObject.put("msisdnNumber", msisdnNumber);
		jsonObject.put("transPath", transPath);
		jsonObject.put("FlowName", FlowName);
		jsonObject.put("sessionId", sessionId);
		jsonObject.put("subscriber", subscriber);
		
		return jsonObject.toString();
	}
	
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2024年11月24日 下午11時11分23秒
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("API_addCIE-End", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}